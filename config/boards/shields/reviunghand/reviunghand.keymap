/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <200>;
        };

        shifthr: shifthr {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFTHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            flavor = "tap-preferred";
            quick-tap-ms = <185>;
        };

        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&lt 4 EQUAL         &lt 3 Q         &kp W               &kp E           &kp R        &kp T                   &kp Y  &kp U        &kp I       &kp O                &kp P                        &lt 5 MINUS
&mt LEFT_SHIFT TAB  &hm LEFT_GUI A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &kp F        &kp G                   &kp H  &kp J        &hm RALT K  &hm RIGHT_CONTROL L  &hm RIGHT_COMMAND SEMICOLON  &hm RSHFT BACKSLASH
&kp LEFT_GUI        &kp Z           &kp X               &kp C           &kp V        &kp B                   &kp N  &kp M        &kp COMMA   &kp DOT              &mt LA(LCTRL) SLASH          &lt 4 SQT
                                                        &mt LALT TAB    &lt 1 ENTER         &lt 1 BACKSPACE         &lt 2 SPACE  &kp GRAVE
            >;
        };

        numbers_fs {
            bindings = <
&kp ESCAPE      &kp F1   &kp F2   &kp F3  &kp F4  &kp F5           &kp N7  &kp N8        &kp N9  &kp MINUS   &kp EQUAL     &kp BACKSPACE
&kp LEFT_SHIFT  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10          &kp N4  &kp N5        &kp N6  &kp SLASH   &kp ASTERISK  &kp SPACE
&trans          &kp F11  &kp F12  &trans  &trans  &trans           &kp N1  &kp N2        &kp N3  &kp PERIOD  &kp COMMA     &kp ENTER
                                  &trans  &trans           &trans          &kp NUMBER_0  &trans
            >;
        };

        arrows_multi {
            bindings = <
&kp LA(LEFT_GUI)  &kp LS(LEFT_GUI)  &kp LG(LS(NUMBER_4))  &kp LG(LC(LS(NUMBER_4)))  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC          &kp HOME       &kp END   &kp UP    &trans     &trans  &trans
&trans            &trans            &trans                &hm LALT C_MUTE           &kp C_VOL_DN          &kp C_VOLUME_UP               &kp PAGE_UP    &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans            &trans            &trans                &kp C_PREV                &kp C_PLAY            &kp C_NEXT                    &kp PAGE_DOWN  &trans    &trans    &trans     &trans  &trans
                                                          &trans                    &trans                                      &trans                 &trans    &trans
            >;
        };

        coding_symb {
            bindings = <
&kp LS(F6)  &none   &kp RG(RS(R))  &none   &none   &none           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE            &kp RIGHT_BRACE            &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &trans  &trans         &trans  &none   &none           &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans                    &trans                     &kp GRAVE         &kp APOSTROPHE
&trans      &none   &none          &trans  &none   &trans          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RS(RG(LEFT_BRACKET))  &kp RS(RG(RIGHT_BRACKET))  &kp RG(RA(LEFT))  &kp RG(RA(RIGHT))
                                   &trans  &trans          &trans                        &trans                 &trans
            >;
        };

        numbers_top {
            bindings = <
&trans  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5               &kp NUMBER_6  &kp N7         &kp N8        &kp N9                &kp N0                 &kp EQUAL
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT          &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&kp F1  &kp F2           &kp F3        &kp F4        &kp F5        &kp F6               &kp F7        &kp F8         &kp F9        &kp F10               &kp F11                &kp F12
                                       &trans        &trans                     &trans                &trans         &trans
            >;
        };

        admin {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &ext_power EP_ON  &ext_power EP_OFF  &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans          &trans            &trans             &trans        &trans        &trans        &trans
                        &trans  &trans          &trans                    &sys_reset         &bootloader
            >;
        };
    };
};
